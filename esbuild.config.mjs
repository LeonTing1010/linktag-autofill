import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copyFileSync, existsSync, mkdirSync } from "fs";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

// Ensure dist directory exists
if (!existsSync("dist")) {
  mkdirSync("dist");
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	format: 'cjs',
	target: 'es2018',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: 'dist/main.js',
});

if (prod) {
	await context.rebuild();
	
	// Copy required files to dist
	const filesToCopy = [
		{ src: "manifest.json", dest: "dist/manifest.json" },
		{ src: "styles.css", dest: "dist/styles.css", optional: true },
		{ src: "versions.json", dest: "dist/versions.json", optional: true }
	];
	
	filesToCopy.forEach(({ src, dest, optional }) => {
		if (existsSync(src)) {
			copyFileSync(src, dest);
			console.log(`Copied ${src} to ${dest}`);
		} else if (!optional) {
			console.warn(`Warning: ${src} not found`);
		}
	});
	
	process.exit(0);
} else {
	await context.watch();
}