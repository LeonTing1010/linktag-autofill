import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copyFileSync, existsSync, mkdirSync } from "fs";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

// Ensure dist directory exists
if (!existsSync("dist")) {
  mkdirSync("dist");
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	format: 'cjs',
	target: 'es2018',
	logLevel: "info",
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: 'dist/main.js',
});

if (prod) {
	await context.rebuild();

	// Ensure dist is clean before copying and zipping
	const fs = await import('fs');
	const distFiles = ['dist/manifest.json', 'dist/main.js', 'dist/styles.css', 'dist/versions.json', 'dist/linktag-autofill.zip'];
	distFiles.forEach(f => {
		if (fs.existsSync(f)) {
			fs.unlinkSync(f);
		}
	});

	// Copy required files to dist
	const filesToCopy = [
		{ src: "manifest.json", dest: "dist/manifest.json" },
		{ src: "styles.css", dest: "dist/styles.css", optional: true },
		{ src: "versions.json", dest: "dist/versions.json", optional: true }
	];
	
	filesToCopy.forEach(({ src, dest, optional }) => {
		if (existsSync(src)) {
			copyFileSync(src, dest);
		} else if (!optional) {
			console.warn(`Warning: ${src} not found`);
		}
	});

	// ---- Add zip packaging below ----
	const archiver = (await import('archiver')).default;
	const output = fs.createWriteStream('dist/linktag-autofill.zip');
	const archive = archiver('zip', { zlib: { level: 9 } });

	output.on('close', () => {
		process.exit(0);
	});
	archive.on('error', err => { throw err; });

	archive.pipe(output);
	archive.file('dist/manifest.json', { name: 'manifest.json' });
	archive.file('dist/main.js', { name: 'main.js' });
	if (fs.existsSync('dist/styles.css')) {
		archive.file('dist/styles.css', { name: 'styles.css' });
	}
	archive.finalize();
	// ---- End zip packaging ----

} else {
	await context.watch();
}